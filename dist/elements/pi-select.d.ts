import { PiSelectAttribute } from "../types/PiSelectAttribute";
import PiOptGroup from "./pi-optgroup";
import PiOption from "./pi-option";
export default class PiSelect extends HTMLElement {
    static formAssociated: boolean;
    static observedAttributes: PiSelectAttribute[];
    shadowRoot: ShadowRoot;
    internals: ElementInternals;
    tabIndex: number;
    private _value;
    get value(): string | null;
    set value(v: string | null);
    private _title;
    get title(): string;
    set title(v: string);
    private _multiple;
    get multiple(): boolean;
    set multiple(v: boolean);
    private _disabled;
    get disabled(): boolean;
    set disabled(v: boolean);
    private _placeholder;
    get placeholder(): string;
    set placeholder(v: string);
    private _name;
    get name(): string;
    set name(v: string);
    private _required;
    get required(): boolean;
    set required(v: boolean);
    validationmessage: string;
    get form(): HTMLFormElement | null;
    get type(): string;
    get validity(): ValidityState;
    get validationMessage(): string;
    get willValidate(): boolean;
    private _isOpen;
    get isOpen(): boolean;
    set isOpen(v: boolean);
    private get buttonElement();
    private get placeholderElement();
    private get valueElement();
    private get listboxElement();
    get allOptions(): PiOption[];
    get options(): PiOption[];
    get allOptGroups(): PiOptGroup[];
    get optGroups(): PiOptGroup[];
    private get currentOption();
    private get currentOptionIndex();
    private get isFirstElement();
    private get isLastElement();
    private get nextOption();
    private get prevOption();
    constructor();
    private appendTemplate;
    connectedCallback(): void;
    attributeChangedCallback(attr: PiSelectAttribute, _: any, value: string | string[] | null): void;
    checkValidity(): boolean;
    reportValidity(): boolean;
    formResetCallback(): void;
    private listenForButtonClickEvent;
    private listenForCloseEvents;
    private listenForBlurEvent;
    private listenForNavigationEvents;
    getValue(): string | null;
    private onUpdateValue;
    private setValueElementValue;
    open(): void;
    close(): void;
    toggle(): void;
    next(): void;
    prev(): void;
}
